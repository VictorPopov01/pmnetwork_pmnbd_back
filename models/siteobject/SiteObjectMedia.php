<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\modules\pmnbd\models\siteobject;

use Yii;

/**
 * This is the base-model class for table "site_object_media".
 *
 * @property integer $id
 * @property integer $media_target_id
 * @property integer $media_id
 * @property string $description
 * @property integer $sort
 *
 * @property \backend\modules\pmnbd\models\siteobject\Media $media
 * @property \backend\modules\pmnbd\models\siteobject\SiteObjectMediaTarget $mediaTarget
 * @property string $aliasModel
 */
class SiteObjectMedia extends \yii\db\ActiveRecord
{

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'site_object_media';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['media_target_id', 'media_id', 'sort'], 'integer'],
            [['description'], 'string', 'max' => 255],
            [['media_id'], 'exist', 'skipOnError' => true, 'targetClass' => Media::className(), 'targetAttribute' => ['media_id' => 'id']],
            [['media_target_id'], 'exist', 'skipOnError' => true, 'targetClass' => SiteObjectMediaTarget::className(), 'targetAttribute' => ['media_target_id' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('models', 'ID'),
            'media_target_id' => Yii::t('models', 'Media Target ID'),
            'media_id' => Yii::t('models', 'Media ID'),
            'description' => Yii::t('models', 'Description'),
            'sort' => Yii::t('models', 'Sort'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getMedia()
    {
        return $this->hasOne(Media::className(), ['id' => 'media_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getMediaTarget()
    {
        return $this->hasOne(SiteObjectMediaTarget::className(), ['id' => 'media_target_id']);
    }

    public function beforeDelete()
    {
        return parent::beforeDelete();
    }
    
    public function afterDelete()
    {
        parent::afterDelete();
        if($this->media && count($this->media->siteObjectMedia) == 0) {
            $this->media->delete();
        }
    }

    public function beforeSave($insert)
    {
        if ($this->isNewRecord) {
            $lastMediaOfTarget = self::find()
                ->where(['media_target_id' => $this->media_target_id])
                ->orderBy(['sort' => SORT_DESC])
                ->one();
            $newSort = empty($lastMediaOfTarget) ? 1 : $lastMediaOfTarget->sort + 1;
            $this->sort = $newSort;
        }
        return parent::beforeSave($insert);
    }
}
