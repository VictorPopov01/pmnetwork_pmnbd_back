<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\modules\pmnbd\models\blog;

use common\models\siteobject\BaseSiteObject;
use Yii;
use yii\helpers\ArrayHelper;
use yii\helpers\Json;

/**
 * This is the base-model class for table "blog_post_block".
 *
 * @property integer $id
 * @property integer $blog_post_id
 * @property integer $blog_block_id
 * @property string $content
 * @property integer $sort
 *
 * @property \backend\modules\pmnbd\models\blog\BlogBlock $blogBlock
 * @property \backend\modules\pmnbd\models\blog\BlogPost $blogPost
 * @property string $aliasModel
 */
class BlogPostBlock extends BaseSiteObject
{

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'blog_post_block';
    }

    public function extraFields()
    {
        return ['blogBlock', 'mediaTargets'];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['blog_post_id', 'blog_block_id', 'sort'], 'integer'],
            [['content'], 'string'],
            [['blog_block_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\modules\pmnbd\models\blog\BlogBlock::className(), 'targetAttribute' => ['blog_block_id' => 'id']],
            [['blog_post_id'], 'exist', 'skipOnError' => true, 'targetClass' => \backend\modules\pmnbd\models\blog\BlogPost::className(), 'targetAttribute' => ['blog_post_id' => 'id']]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('models', 'ID'),
            'blog_post_id' => Yii::t('models', 'Blog Post ID'),
            'blog_block_id' => Yii::t('models', 'Blog Block ID'),
            'content' => Yii::t('models', 'Content'),
            'sort' => Yii::t('models', 'Sort'),
        ];
    }

    public function beforeSave($insert)
    {
        if ($this->isNewRecord) {
            $last = self::find()
                ->where(['blog_post_id' => $this->blog_post_id])
                ->orderBy(['sort' => SORT_DESC])
                ->one();
            $newSort = empty($last) ? 1 : $last->sort + 1;
            $this->sort = $newSort;
        }
        return parent::beforeSave($insert);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getBlogBlock()
    {
        return $this->hasOne(\backend\modules\pmnbd\models\blog\BlogBlock::className(), ['id' => 'blog_block_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getBlogPost()
    {
        return $this->hasOne(\backend\modules\pmnbd\models\blog\BlogPost::className(), ['id' => 'blog_post_id']);
    }

    public function getHtml($extraData = [])
    {
        return $this->blogBlock->render($this, $extraData);
    }

    public function getParagraph()
    {
        try {
            $dataFromInputs = Json::decode($this->content);
        } catch (\Throwable $th) {
            return null;
        }
        return $dataFromInputs['paragraph'] ?? null;
    }

}
